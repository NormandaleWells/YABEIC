8-bit computer ideas

goals
	pack as many useful instructions into 8 bits as possible
	more registers
		index registers with address modes
	arithmetic and logic: add adc sub sbb and or xor cmp not neg
	rotate and shift: rol rcl ror rcr shl shr sar
		could live with shifts by having set/clear carry instructions
	orthogonal instruction set
	stack and subroutine calls
	extensible to 16 bits
	simplify control logic
		instruction bits used for control (e.g. register select)
	I/O
	addressing modes - (Rn), -(Rn), (Rn)+, offset(Rn)
		may require separate adder to keep cycle count down
	not concerned with I/O - one input, one output enough
		input - dip switches
		output - display (ala Ben Eater)

overall
	do what looks challenging but doable, and maybe useful
	use of LS logic (prefer HCT) driven by lack of 74HC181 chips
	use mouser.com - better selection, easier searching
	see James Bates's series on YouTube
	use Arduino for testing control logic

memory: 256 bytes data, 256 bytes program
	use ROM for program memory?

registers: A, B, R0..R3, PC, SP

	A	accumulator - target of all ALU operations
	B	B register - second operand of ALU
	R0..R3	registers - R2,R3 may be used as address registers
		can't use all as address regs - not enough bits in instructions
	PC	program counter
	SP	stack pointer

alternate register idea (inspired by James Bates's instruction set):
	A, B as above
	R0, R1, PC, SP
		allows immediate operand as (PC)+
		push is MOV -(SP),Rn
		pop is MOV Rn,(SP)+
		bit patterns for (PC) and -(PC) address modes can be used elsewhere

addressing modes:

	Rn		register
	(Rn)		Rn is address
	(Rn+)		Rn is address, post-incremented
	(-Rn)		Rn is address, pre-decremented
	(Rn+imm)	Rn is address, immediate 8-bit value is added first

flags:

	C	carry		carry out from operation
	Z	zero		all result bits 0
	V	overflow	(A7 xor R7) and (B7 xor R7)
	N	negative	result bit 7
	All arithmetic/logical operations set all flags
	Must latch info flags register before A is changed!

I/O

	2 input registers
	2 output registers

bus

	single system bus
	ALU operands fed to B register
	A and B are fed "live" to ALU, output clocked into A

ALU
	74LS181 - requires use of HCT (or LS) chips everywhere else
	A register is source/dest for all ALU ops
	have separate 74LS283x2 for PC/SP (and R2,R3 offset addressing)
		jump with offset
		read stack with offset
		add/subtract stack (set up stack frame)
		separate bus?

implementation notes:

	register ICs (octal)
		273 CLR, CLK, not 3-state
		373 not edge-triggered not 3-state
		374 CLK, edge-triggered not 3-state
		377 CLK, CLK enable, not 3-state
			don't really need clear
			don't need output enable - can use 245
			input CLK enable is useful - avoid AND gate (CLK and IN)
		574 CLK but no CLK enable - requires extra logic to AND enable/CLK
			but has all inputs/outputs on same side - easier wiring
			see https://www.reddit.com/r/beneater/comments/hgr2nf/8_bit_gpr_my_build/
			does have output enable, but we don't really need that

	A,B	74HCT173 D-type register 3-state outputs (or 74LS273?)
			273 requires use of 245 for enable - no enable on chip
			*** could use 74HCT377 - 8 bits, no enable, requires 245
			diff between 273 and 377?
				273 has CLR - not really needed
			74HCT574? tri-state octal flip-flop
				no clock enable - requires separate clk AND enable circuit
			use 377 / 245 (same as James Bates - https://www.youtube.com/watch?v=AALVh39X3xw

	T	temporary register used for some addressing
			e.g. CALL, immediate offset (LD R0,(R2+imm), indirect address (LDI R0,(imm))
			Can't use DB as input to AG!  Need DB to have data being addressed!
			Offset is two-step: load T, read mem
			74HCT377

	Rn,SP	74LS169 4-bit synchronous binary up/down counter
			not available as HCT - use 74HCT191 or 74HCT193
				these are IT chips w/ CD prefix - what is that?
			but easier to work with - see below re: 193
				maybe not - see below
		requires 74LS245 octal bus tranceiver
		74HCT670 - 4x4 bits, independent read/write
			would allow R0-R3 in 2 chips (3 with transceiver)
			no built-in increment/decrement
		use 377 for R0, R1 (needs 245)
		use 193x2 for R2, R3, SP (needs 245)
			presettable
			logic is tricky - requires counter signals high, count on low-high transition
			can be done by ORing clock with enable

	IR	use 377 - no 245 necessary

	PC	74HCT161 4-bit synchronous binary counter
			these are IT chips w/ CD prefix - what is that?
			74HCT193? 193 is up/down w/ clear
			connect TC of low-order to TE of high-order to cascade
				see James Bates Part 5 ~18:00
			asynchronous reset (163 has sync reset)
		requires 74HCT245 octal bus tranceiver

	Control Unit
		74HCT163 - counter (like 161) with sync. reset
			How does James Bates get away with using the 161 here?
			Should be resetting immediately when control unit signals a reset.
			Should wait for clock signal.

	ALU	74LS181 - provides all required ALU ops
		not available as HCT

	Use 74HCT245 always?  Would allows us to see register contents

	always decode condition as input to control logic
		2 bits to select flag
		1 bit to negate

	memory - check into AS6C6264 (8K x 8 SRAM)
		or AT28C64B

	decoders / demultiplexers
		74HCT138 - 3-line to 8-line
			inverted outputs - what we need for most enables!
			for multiplexed control signals (load/enable)
		74HCT139 - dual 2-line to 4-line
			inverted outputs
			for register selection (ro-r3)

	selectors / multiplexers
		74HCT157 - quad 2-line to 1-line (single selector signal for all)
		74HCT257 - quad 2-line to 1-line w/ 3-state outputs
		74HCT153 - dual 4- to 1-line selector (outputs low if not enabled)
			for flags
		74HCT253 - dual 4- to 1-line selector (tri-state outputs)
			for flags

	XCHG A,Rn
		1: enable Rn, load B, set 181 to logical B
		2: enable A, load Rn, load A
			doable in one micro-op?  load A and enable A together?

	MOV A,Rn
		1: enable Rn, load B, set 181 to logical B, load A

	SHL, ROL, RCL
		use ALU

	SHR, SAR, ROR, RCR
		???
		special circuit feeding reg B?

	See James Bates series, especially control logic
		Part 9 - 33 minute mark
		fixes problems with EEPROMs not being stable soon enough
			uses 74HCT273 buffer between IR and EEPROM
			uses 74HCT173 buffer between flags and EEPROM
			173/273 are clocked on h-l transition, same as sequence counter
			all signals arrive at EEPROM simultaneously

	don't invert control signals; store as inverted
		connect LEDs to ground for active high, 5C for active high
			LED then lights up to shown when signal is active, either way
			(idea from James Bates)

	memory
		AT28C256 - EEPROM 32K x 8 $8.88
		AT28C64  - EEPROM  8K x 8 $4.20
			same pin-outs, 28C64 has two NC pins where 28C256 has A13,A14
		6116  - SRAM  2K x 8 $4.64 for standard power, 20 ns, 24-pin
		71256 - SRAM 32K x 8 $3.29 for standard power, 12 ns, 28 pin
			any reason to prefer slower chip at same price?
			similar pinouts
		use dip switches to select bits 8-n of ROM?  Would allow several
			256-byte programs in ROM, selectable by DIP switches

	logic chips
		00 - quad NAND
		02 - quad NOR
		04 - hex inverter
		08 - quad AND
		32 - quad OR
		86 - quad XOR

	conditional branches
		decode 2-bit field to 1 of 4, and with flags bits, OR together
			feed into logic signal to inhibit/enable PC write
		feed to control logic as a single bit

	use separate adder for PC,SP,Rn offset ops?
		one input from register
		one input from immediate operand

	separate address and data busses?
		assume second instruction set for now - should work for first as well
		R0,R1,SP,PC read/write both busses
		address bus feed live by address calculator with 2 inputs:
			register (one of R0,R1,SP,PC)
			offset (0, 1, -1, or data bus contents (for offsets)
		MAR connected only to address bus
		RAM connected only to data bus
		no need for MAR?  Can address bus feed memory directly?
			would save one cycle for many operations, like fetch

	Address generation unit (AGU)
		simple adder 
			adder - first input is a register (R2, R3, SP, PC)
			second is selected among 0,-1,T (immediate offset)
			7HCT283
		NOTE: for decrement, register is not changed until clock up
		don't need constant 1 since we post-increment the register
		Problem: decrementing a register will change the address bus, perhaps
			while still writing to memory.
		Not a problem for post-increment.  That's never
			a memory write; it's always a memory read
			The address bus and data bus may change with a post-increment,
			but on a memory read the data is already latched somewhere else.
		Idea: use 574 latch with inverted clock - invert 3-5 times to
			delay signal until address bus is ready - address will hold until
			next clock down - no worries about pulse width
		Idea: use a 373 transparent latch with inverted clock
			transparent while clock down (inverted clock high)
			latched while clock up (inverted clock low)
		How to get T onto data bus for CALL, LEA
			(1) Use TDO
			no (2) Use AGUDO, Z register input to AGU
			2 removes one xDO signal, adds one xAO signal
			Z may be useful in other ways (e.g. default AGU input)
			BUT: TDO needed for MOV SP,imm

	Rotation Unit
		always reading from B register (data needs to be latched into B)
			route into two 245s, one for left, one for right
			bit 0 (left shift) / bit 7 (right shift) selected from 4 values
				use instruction bits to select
					b1b0 chooses among 0,b7,C,b0 for b0/b7
					b2 choose left/right shift
		b2 determines which 245 is enabled
		third 245 used to output to DB
			cycle 1: A out, B in
			cycle 2: RU out, A in

	Control Unit
		FLAG signal is always generated from b1b0 of IR, b2 from IR (NOT)
		IR(b1b0) demultiplexed into ~IZ ~IC ~IO ~IN
		conditional jumps - 3 inputs, 1 output
			~PCDI	- read PC from data bus
			~PCIF	- only read PC if flags (active low to simplify logic)
			FLAG	- flag from IR combined with flags reg
			~SPE	- input to 161/163
				~PCDI	0	0	0	0	1	1	1	1
				~PCIF	0	0	1	1	x	x	x	x
				FLAG	0	1	x	x	x	x	x	x
				----
				~SPE	1	0	0	0	1	1	1	1
			~SPE = ~PCDI or (~PCIF nor FLAG)
		for each flag (x in ZCON)
			~xI	- flag from instruction (decoded)
				NOTE: 139 has inverted output
			xF	- flag from flags register
			NOT	- bit from instruction
			xT	- 1=jump due to this flag, 0=no jump
				~xI	0	0	0	0	1	1	1	1
				xF	0	0	1	1	x	x	x	x
				NOT	0	1	0	1	x	x	x	x
				----
				xT	0	1	1	0	0	0	0	0
			xT = (xF xor NOT) and not ~xI
			FLAG = or (ZT or CT or OT or NT)
				input into conditional jump
				xnor is 74LS266 (if needed)
		for ~xINC and ~xDEC
			74ls169 has ~ENP and U/~D pins (~ENT cascades from ~RC0)
			~ENP = ~xINC and ~xDEC
			U/~D = ~xDEC
		use 32-bit control word (even if only 24 needed):
			program same contents into each ROM
				bits 0,1	- select ROM
				bits 2,3	- sequence counter
						  as of now, max 4 steps per operation
				bits 4,11	- IR
			minimum 4K ROM needed

		See James Bates part 9, 34:00 for need for latches to EEPROM address
			loading IR will change the EEPROM address
			uses 74HCT273
			see also David Courtney's videos

control signals:

	Original thought was to use the instruction bits wherever possible
	to select registers, etc.  However, this requires a LOT of demultiplexers
	since, for example, b1b0 may either a source or destination reg, and
	the address registers often have an implicit to select R2 or R3. Also,
	PC and SP don't fit this model anyway.

	But: This approach does still work for:
		condition jumps - 2-4 decoder used to select proper flag
		rotations - 1 bit for l/r, 2 to select end bit operation

	Data bus out (4 bits, multiplexed)
	use 2x138 - all enables are active low (245)
	for TDO, use ZAO, AGT, AGUDO
	for BO, use ALU function to output B
		NODO (= F) (needed?)
		ADO
		R0DO
		R1DO
		R2DO
		R3DO
		SPDO
		PCDO
		RAMDO
		ROMDO
		RUDO
		TDO
		ALUDO
		AGUDO (needed for address calculations)
			add R,imm	with R=SP,R2,R3
	Data bus in (4 bits, multiplexed)
	use 2x138 - all loads are active low
		NODI (= F)
		ADI
		BDI
		R0DI
		R1DI
		R2DI
		R3DI
		SPDI
		PCDI
		TDI
		RAMDI
		IRDI
	Address bus out (3 bits, multiplexed)
	use 1x138 - all enables are active low
	instead of TAO, use ZAO, AGT, AGUDO
		ZAO
		R2AO
		R3AO
		PCAO
		SPAO
	Address generator in (2 bits, multiplexed)
		AG0
		AGN1
		AGT
	Increment/Decrement (3 bits, multiplexed)
	use 1x138 - all enables are active low
		NODI (= 0)
		R2DEC
		R3DEC
		SPDEC
		R2INC
		R3INC
		PCINC
		SPINC
	ALU (7 (8?) bits)
		ALUF0 - ALUF4 - 4 function
		ALUM - logic/arithmetic selector
		ALUC0, ALUC1
			carry in (need selector C, 0, 1, ~C)
		ALUFI = Flags in
	Other (3 bits)
		~PCIF
		SEQRST
		HLT
		PGR (select ROM or RAM)


Some example microcode:
	fetch cycle
		ROMDO,IRDI,PCAO,AG0,PCINC		IR <- ROM(PC++)
	MOV R0,R1
		R1DO,R0DI,ZAO,AG0,NODEC,SEQRST		R0 <- R1
	MOV R0,(R2+imm)
		ROMDO,TDI,PCAO,AG0,PCINC		T <- ROM(PC++)
		RAMDO,R0DI,R2AO,AGT,NODI,SEQRST		R0 <- RAM(R2+T)
	JMP addr
		ROMDO,TDI,PCAO,AG0,PCINC		T <- ROM(PC++)
		PCDO,RAMDI,SPAO,AG0,SPDEC		RAM(--SP) <- PC
		TDO,PCDI,ZAO,AG0,NODI,SEQRST		PC <- T
	LD R1,imm
		ROMDO,R1DI,PCAO,AG0,PCINC,SEQRST	R1 <- ROM(PC++)
	LD R2,(imm)
		ROMDO,TDI,PCAO,AG0,PCINC		T <- ROM(PC++)
		RAMDO,R2DI,ZAO,AGT,NODI,SEQRST		R2 <- RAM(0+T)
	PUSH imm
		ROMDO,TDI,PCAO,AG0,PCINC		T <- ROM(PC++)
		TDO,RAMDI,SPAO,AG0,SPINC,SEQRST		RAM(--SP) <- T
	ADD SP,imm
		ROMDO,TDI,PCAO,AG0,PCINC		T <- ROM(PC++)
		AGUDO,SPDI,SPAO,AGT,NODI,SEQRST		SP <- SP+T (via AGU)



	
instruction set:

General format

	ggg ooo nn
	ggg aap nn
	ggg ooo ff

		ggg - instruction group
		ooo - operation
		nn  - register
			00 - R0
			01 - R1
			10 - R2
			11 - R3
		aa - addressing mode
			00 - (Rn)
			01 - (Rn + offset)
			10 - (Rn+)
			11 - (-Rn)
		p - pointer register
			0 - R2
			1 - R3
		ff - branch condition
			00 - C
			01 - Z
			10 - N
			11 - O

Registers always in bits 0,1 or 2,3 (for addressing, bit 3 ORed high)
Addressing mode always in bits 3,4
Branch condition always in bits 0,1

Group 0.0 - register-register transfers

	no flags are affected

	000 0dd ss	MOV Rd,Rs

	special cases
	000 000 00	NOP (MOV R0,R0)
	000 001 01 	RET (MOV R1,R1)
	000 010 10 	STC (MOV R2,R2)
	000 011 11 	CLC (MOV R3,R3)

Group 0.1 - operations with immediate operands

	no flags are affected

	000 100 nn	LD Rn,imm	immediate 8-bit value
	000 101 nn	LD Rn,(imm)	immediate 8-bit address
	000 110 nn	ST (imm),Rn	immediate 8-bit address
	000 111 00	LD A,imm	immediate 8-bit value
	000 111 01	LD SP,imm	immediate 8-bit value
	000 111 10	JMP imm		immediate 8-bit value
	000 111 11	CALL imm	immediate 8-bit value

Group 1 - other register ops

	001 ooo nn

	ooo
		000 MOV Rn,A
		001 MOV A,Rn
		010 POP Rn
		011 PUSH Rn
		100 MOV Rn,SP
		101 MOV SP,Rn
		110 LD Rn,(SP+imm)
		111 ST (SP+imm),Rn

Group 2 - ALU operations

	A is always first operand and destination
	all flags set on each operation
	010 ooo nn

		nn is register number of second operand
		ooo
			add	A = A + Rn
			sub	A = A - Rn
			adc	A = A + Rn + C
			sbb	A = A - Rn - C
			xor	A = A ^ Rn
			and	A = A & Rn
			or	A = A | Rn
			cmp	A - Rn (flags only)

Group 3 - accumulator-only operations

	011 gg ooo (gg - subgroup)

	subgroup 00
		all flags set on each operation
		011 00 ooo
		ooo
			b1b0 chooses among 0,b7,C,b0 for b0/b7
			b2 choose left/right shift

			000	shl	shift left,   b0 <- 0   C <- b7
			001	rol	rotate left,  b0 <- b7  C <- b7
			010	rcl	rotate left,  b0 <- C   C <- b7

			011	clr	clear accumulator

			100	shr	shift right,  b7 <- 0   C <- b0
			101	sar	shift right,  b7 <- b7  C <- b0
			110	rcr	rotate right, b7 <- C   C <- b0
			111	ror	rotate right, b7 <- b0  C <- b0

	subgroup 01
		all flags set on each operation
		011 01 ooo (imm = immediate 8-bit value)
		ooo
			add imm		A = A + imm
			sub imm		A = A - imm
			adc imm		A = A + imm
			sbc imm		A = A - imm
			xor imm		A = A ^ imm
			and imm		A = A & imm
			or imm		A = A | imm
			cmp imm		A - imm (flags only)

	subgroup 10
		011 10 iii
			IN port		port is 3-bit port number

	subgroup 11
		011 11 iii
			OUT port	port is 3-bit port number

Group 4 - load register

	100 aap nn	LD Rn,(Rp)
	except auto inc/dec where Rp == Rn

	special cases (where Rp == Rn)
		100 100 10	ADD SP,imm	[LD R2,(R2)+]
		100 110 10	PUSH imm	[LD R2,-(R2)]
		100 101 11	PUSH A		[LD R3,(R3)+]
		100 111 11	POP A		[LD R3,-(R3)]

Group 5 - store register

	101 aap nn	ST (Rp),Rn
	except auto inc/dec where Rp == Rn

	unused (4 instructions):
		101 100 10	MOV R2,PC	[ST (R2)+,R2]
		101 110 10	INC R2		[ST -(R2),R2]
		101 101 11	MOV R3,PC	[ST (R3)+,R3]
		101 111 11	INC R3		[ST -(R3),R3]

Group 6 - more register ops (with addressing)

	110 aap oo

		00 - LD A,(Rp)
		01 - ST (Rp),A
		10 - LDPM A,(Rp)	- load from program memory
		11 - unused (8 instructions - would prefer addressing ops)
			110 00p 11	LD R0,(Rp+A)
			110 01p 11	LD R1,(Rp+A)
			110 10p 11	ST (Rp+A),R0
			110 11p 11	ST (Rp+A),R1
				
		no flags set

Group 7.0 branch instructions

	111 0oo ff

		ff	flag to check
		oo
			00 - BRc imm
			01 - BRNc imm
			10 - SKc	next instruction must be two bytes
			11 - SKNc	next instruction must be two bytes
		c = C, Z, N, O
		destination is immediate byte

Group 7.1

	111 1oo nn

		oo
			00 - XCHG Rn,A
				Rn -> B, A -> Rn, B -> A (via ALU)
			01 - CALL (Rn)
			10 - ???
			11 - see next group

	111 111 oo

		oo
			00 - ADD R2,imm (uses AGU)
			01 - ADD R3,imm (uses AGU)
			10 - ???
			11 - HLT




============================================================

Alternate instruction set (inspired by James Bates)
	A, B, R0, R1, SP(=R2), PC(=R3)

MOV group

	00 Ro aa Ra = MOV Ro,aa(Ra) (load)
	01 Ro aa Ra = MOV aa(Ra),Ro (store)
		aa = address mode
			00 = (Rn)
			01 = off(Rn)
			10 = (Rn)+
			11 = -(Rn)
			register direct source encoded as aa(SP)=R0, aa(PC)=R1
			A encoded generally as (PC)
		Ra = address register
		Ro = other register
		Rg = general-purpose register (R0 or R1)
		off = offset (immediate value - PC incremented)
		addr = address (@immedate value - PC incremented - encoded using off(PC))

		00 0x 00 00	MOV Rg,(R0)
		00 0x 00 01	MOV Rg,(R1)
		00 0x 00 10	MOV Rg,(SP)	fast access to one local variable
		00 0x 00 11	MOV Rg,A	would be MOV Rg,(PC)

		00 0x 01 00	MOV Rg,off(R0)
		00 0x 01 01	MOV Rg,off(R1)
		00 0x 01 10	MOV Rg,off(SP)	access to local variables
		00 0x 01 11	MOV Rg,addr	would be MOV Rg,off(PC)

		00 0x 10 00	MOV Rg,(R0)+
		00 0x 10 01	MOV Rg,(R1)+
		00 0x 10 10	POP Rg		alias for MOV Rg,(SP)+
		00 0x 10 11	MOV Rg,imm	alias for MOV Rg,(PC)+

		00 0x 11 00	MOV Rg,-(R0)
		00 0x 11 01	MOV Rg,-(R1)
		00 0x 11 10	MOV Rg,R0	would be MOV Rg,-(SP)
		00 0x 11 11	MOV Rg,R1	would be MOV Rg,-(PC)

		00 10 xx xx	branch		would be MOV SP,aa(ra)

		00 11 00 00	MOV PC,(R0)
		00 11 00 01	MOV PC,(R1)
		00 11 00 10	MOV PC,(SP)	local variable is jump address
		00 11 00 11	MOV PC,A	would be MOV PC,(PC)

		00 11 01 00	MOV PC,off(R0)	switch statement?
		00 11 01 01	MOV PC,off(R1)	switch statement?
		00 11 01 10	MOV PC,off(SP)	switch statement (local array of jump dests)?
		00 11 01 11	???		would be MOV PC,off(PC)

		00 11 10 00	MOV PC,(R0)+	useful???
		00 11 10 01	MOV PC,(R1)+	useful???
		00 11 10 10	RET		alias for MOV PC,(SP)+
		00 11 10 11	JMP addr	would be MOV PC,(PC+)

		00 11 11 00	MOV PC,-(R0)	useful???
		00 11 11 01	MOV PC,-(R1)	useful???
		00 11 11 10	MOV PC,R0	would be MOV PC,-(SP)
		00 11 11 11	MOV PC,R1	would be MOV PC,-(PC)

		01 0x 00 00	MOV (R0),Rg
		01 0x 00 01	MOV (R1),Rg
		01 0x 00 10	MOV (SP),Rg	fast access to one local variable
		01 0x 00 11	MOV A,Rg	would be MOV (PC),Rg

		01 0x 00 00	MOV off(R0),Rg
		01 0x 00 01	MOV off(R1),Rg
		01 0x 00 10	MOV off(SP),Rg	access to one local variable
		01 0x 00 11	MOV addr,Rg	would be MOV off(PC),Rg

		01 0x 10 00	MOV (R0)+,Rg
		01 0x 10 01	MOV (R1)+,Rg
		01 0x 10 10	MOV SP,A	would be MOV (SP)+,Rg
		01 0x 10 11	???		would be MOV (PC)+,Rg

		01 0x 11 00	MOV -(R0),Rg
		01 0x 11 01	MOV -(R1),Rg
		01 0x 11 10	PUSH Rg		alias for MOV -(SP),Rg
		01 0x 11 11	CLR Rg		would be MOV -(PC),Rg

		01 10 00 00	MOV R0,SP	would be MOV (R0),SP (for local address calcs)
		01 10 00 01	MOV R1,SP	would be MOV (R1),SP (for local address calcs)
		01 10 00 10	INITSP		SP = 0
		01 10 00 11	MOV A,SP	would be MOV (PC),SP (for local address calcs)
		01 10 01 xx	shift		would be MOV off(PC),Rn
		01 10 10 xx	rotate		would be MOV (PC)+,Rn
		01 10 11 xx	skip		would be MOV -(PC),Rn

		01 11 00 0x	MOV (Rg),PC
		01 11 00 10	???		would be MOV (SP),PC
		01 11 00 11	MOV A,PC	would be MOV (PC),PC

		01 11 01 0x	INC Rg		would be MOV off(Rn),PC
		01 11 01 1x	DEC Rg		would be MOV off(Rn),PC

		01 11 10 00	PUSH A		would be MOV (R0)+,PC
		01 11 10 01	POP A		would be MOV (R1)+,PC
		01 11 10 10	MOV R0,PC	would be MOV (SP)+,PC
		01 11 10 11	MOV R1,PC	would be MOV (PC)+,PC

		01 11 11 00	INC A		would be MOV -(Rg),PC
		01 11 11 01	DEC A		would be MOV -(Rg),PC
		01 11 11 10	PUSH PC		alias for MOV -(SP),PC
		01 11 11 11	HLT		would be MOV -(PC),PC


ALU group
	1 ooo aa Ra
		ooo = operation
			ADD, ADC, SUB, SBB, AND, OR, XOR, CMP

		1 ooo aa 00	ALU aa(R0)
		1 ooo aa 01	ALU aa(R1)

		1 ooo 00 10	ALU (SP)	quick access to one local variable
		1 ooo 01 10	ALU off(SP)
		1 ooo 10 10	ALU (SP)+	(useful? ALU + POP)
		1 ooo 11 10	ALU R0		would be ALU -(SP)

		1 ooo 00 11	???		would be ALU (PC)
						could use for CLR A, PUSH A, POP A, NEG A, COMP A, IN, OUT
						could be ALU A, but has limited usefulness
		1 ooo 01 11	ALU addr	would be ALU off(PC)
		1 ooo 10 11	ALU imm		alias for ALU (PC)+
		1 ooo 11 11	ALU R1		would be ALU -(PC)

Branch group
	00 10 dd cc - branch on condition (would be MOV SP,aa(Ra))
	01 10 11 cc - skip on condition (next instruction must be one byte)
		cc = condition
			00 = Z (zero)
			01 = C (carry)
			10 = O (overflow)
			11 = N (negative)
		dd = destination
			00 = (PC)+ imm
			01 = A
			10 = R0
			11 = R1
	could use 01 10 cc dd for skip on condition, and find other bit patterns
		for the three exceptions there

Shift group
	01 10 01 xx
		01 10 01 00	SHL (alias for ADD A?)
		01 10 01 01	???
		01 10 01 10	SHR
		01 10 01 11	SAR

Rotate group
	01 10 10 xx
		01 10 10 00	STC
		01 10 10 01	CLC
		01 10 10 10	ROL
		01 10 10 11	ROR

missing:
	enter (set up space on stack for stack frame)
	leave (really just POP SP)
	exchange (A with R0,R1)